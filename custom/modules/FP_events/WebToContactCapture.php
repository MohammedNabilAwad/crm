<?php
if(!defined('sugarEntry') || !sugarEntry) die('Not A Valid Entry Point');
/*********************************************************************************
 * SugarCRM Community Edition is a customer relationship management program developed by
 * SugarCRM, Inc. Copyright (C) 2004-2013 SugarCRM Inc.

 * SuiteCRM is an extension to SugarCRM Community Edition developed by Salesagility Ltd.
 * Copyright (C) 2011 - 2014 Salesagility Ltd.
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Affero General Public License version 3 as published by the
 * Free Software Foundation with the addition of the following permission added
 * to Section 15 as permitted in Section 7(a): FOR ANY PART OF THE COVERED WORK
 * IN WHICH THE COPYRIGHT IS OWNED BY SUGARCRM, SUGARCRM DISCLAIMS THE WARRANTY
 * OF NON INFRINGEMENT OF THIRD PARTY RIGHTS.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Affero General Public License along with
 * this program; if not, see http://www.gnu.org/licenses or write to the Free
 * Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 * 02110-1301 USA.
 *
 * You can contact SugarCRM, Inc. headquarters at 10050 North Wolfe Road,
 * SW2-130, Cupertino, CA 95014, USA. or at email address contact@sugarcrm.com.
 *
 * The interactive user interfaces in modified source and object code versions
 * of this program must display Appropriate Legal Notices, as required under
 * Section 5 of the GNU Affero General Public License version 3.
 *
 * In accordance with Section 7(b) of the GNU Affero General Public License version 3,
 * these Appropriate Legal Notices must retain the display of the "Powered by
 * SugarCRM" logo and "Supercharged by SuiteCRM" logo. If the display of the logos is not
 * reasonably feasible for  technical reasons, the Appropriate Legal Notices must
 * display the words  "Powered by SugarCRM" and "Supercharged by SuiteCRM".
 ********************************************************************************/

require_once('include/formbase.php');
//require_once('custom/modules/FP_events/EventFormBase.php'); // IGNORED IMPORT


// OPENSYMBOLMOD Alberto Guiotto 2016-04-22 - Manage request by any page generated by Web to capture functionality

global $app_strings, $app_list_strings, $sugar_config, $timedate, $current_user;
$mod_strings = return_module_language($sugar_config['default_language'], 'FP_events');
$app_list_strings['record_type_module'] = array('Event'=>'FP_events', 'Account'=>'Accounts', 'Opportunity'=>'Opportunities', 'Case'=>'Cases', 'Note'=>'Notes', 'Call'=>'Calls', 'Email'=>'Emails', 'Meeting'=>'Meetings', 'Task'=>'Tasks', 'Contact'=>'Contacts','Bug'=>'Bugs',);
$users = array('PUT A RANDOM KEY FROM THE WEBSITE HERE' => array('name'=>'PUT THE USER_NAME HERE', 'pass'=>'PUT THE USER_HASH FOR THE RESPECTIVE USER HERE'),);
// .Bug 41292
if (isset($_REQUEST['assigned_user_id']) && !empty($_REQUEST['assigned_user_id'])) {
	$current_user = new User();
	$current_user->retrieve($_REQUEST['assigned_user_id']);
}


if (!isset($_POST['event_id']) || empty($_POST['event_id'])) {
	echo $mod_strings['LBL_MISSING_EVENT_ID'];
	return;
}

// Fetch sign up user basic data
$_POST['client_id_address'] = query_client_ip();
$event_id=$_POST['event_id'];

// Check if Contact already exists by Email, and determine Account by Account_Code
$account_code = null;
$isPotentialContact = false;
$account = null;
$contact_email = null;
$contact = null;
$ex = null;
if (isset($_POST['account_code']) && $_POST['account_code'] != null && !empty($_POST['account_code']))
{
	// ...load the account for received account_code (if user specified one)
	$account_code = (string)$_POST['account_code'];
	$account = new Account();
	$account = $account->retrieve_by_string_fields(array('osy_account_code' => $account_code));
	if ($account == null) {
		echo $mod_strings['LBL_INVALID_ACCOUNT_CODE'];
		return;
	}	
}

if (isset($_POST['email1']) && $_POST['email1'] != null && !empty($_POST['email1']))
{
	// ...search for Contacts have the same email passed
	$contact_email = $_POST['email1'];
	$contact = new Contact();
	$ctc_query  = "select id from contacts ctc where deleted = 0 AND EXISTS (
        SELECT 1 FROM email_addr_bean_rel AS eabr_scauth INNER JOIN email_addresses AS ea_scauth
        ON ea_scauth.deleted = 0 AND eabr_scauth.email_address_id = ea_scauth.id 
		WHERE ctc.id = eabr_scauth.bean_id AND ea_scauth.email_address_caps ='$contact_email')";
	$ctc_result=$contact->db->query($ctc_query);
	if ($ctc_result->num_rows > 1 && $account != null) {
		// (several Contacts matches are present, filter per account)
		$foundMatchCtc = false;
		for ($fcCtcIdx = 0; $fcCtcIdx < $ctc_result->num_rows && !$foundMatchCtc; ++$fcCtcIdx) {
			$matchCtc = $GLOBALS['db']->fetchByAssoc($ctc_result);
			$contact = $contact->retrieve($matchCtc["id"]);
			$contact->load_relationship("accounts");
			if ($contact->account_id == $account->id)
				$foundMatchCtc = true;
		}
	}
	else if ($ctc_result->num_rows > 0) {
		// (only a single Contact match: take the first Contact in results) 
		$matchCtc = $GLOBALS['db']->fetchRow($ctc_result);
		$contact = $contact->retrieve($matchCtc["id"]);
		$contact->load_relationship("accounts");
		if ($account == null || $account->id != $contact->account_id) {
			$account = new Account();
			$account = $account->retrieve($contact->account_id);
		}
	}
	else {
		// (no rows found: search into osy_contactspotentialmember - no accounts related)
		$contact = new osy_contactspotentialmember();
		$ctc_query  = "select id from osy_contactspotentialmember ctc where deleted = 0 AND EXISTS (
		SELECT 1 FROM email_addr_bean_rel AS eabr_scauth INNER JOIN email_addresses AS ea_scauth
		ON ea_scauth.deleted = 0 AND eabr_scauth.email_address_id = ea_scauth.id
		WHERE ctc.id = eabr_scauth.bean_id AND ea_scauth.email_address_caps ='$contact_email')";
		$ctc_result=$contact->db->query($ctc_query);
		if ($ctc_result->num_rows > 0) {
			// fetch first row matching in osy_contactspotentialmember, if any
			$matchCtc = $GLOBALS['db']->fetchRow($ctc_result);
			$contact = $contact->retrieve($matchCtc["id"]);
			$account = null;
			$isPotentialContact = true;
		}
		else 
			$contact = null;
	}
}
if ($account == null && $contact == null) {
	$isPotentialContact = true;
}


// Create new Contact (or PotentialContact) if missing 
$isNewContact = false;
$associatedLead = null;
if ($contact == null) {
	$isNewContact = true;
	$prefix = '';
	if(!empty($_POST['prefix'])) {
		$prefix = $_POST['prefix'];
	}
	if (!$isPotentialContact) {
		$contact = new Contact();
	}
	else {
		$contact = new osy_contactspotentialmember();
		
		// create a new Lead for the potentialmember
		if (isset($_POST['department']) && $_POST['department'] != null && !empty($_POST['department']))
		{
			$contact_department = $_POST['department'];
			$associatedLead = new Lead();
			$associatedLead->account_name = $contact_department;
			$associatedLead->save();
		}
	}
	
	populateFromPost($prefix, $contact);
	
	if(empty($contact->id)) {
		$contact->id = create_guid();
		$contact->new_with_id = true;
	}
	$GLOBALS['check_notify'] = true;
	//bug: 42398 - have to unset the id from the required_fields since it is not populated in the $_POST
	unset($contact->required_fields['id']);
	// Bug #52563 : Web to Contact form redirects to Sugar when duplicate detected
	// prevent duplicates check
	$_POST['dup_checked'] = true;
	
	 if(!empty($GLOBALS['check_notify'])) {
     	$contact->save($GLOBALS['check_notify']);
     }
     else {
     	$contact->save(FALSE);
     }
}

// Relate contact to new created account/lead
if ($isNewContact) {
	if (!$isPotentialContact) { 
		if ($account != null) {
			$acctRel = "accounts";
			$contact->load_relationship($acctRel);
			$contact->$acctRel->add($account->id);
			$contact->save();
		}
	}
	else {
		if ($associatedLead != null) {
			$leadRel = "leads_link";
			$contact->load_relationship($leadRel);
			$contact->$leadRel->add($associatedLead->id);
			$contact->save();
		}
	}
}

	
// Register Contact to the event
$eventContactRel = null;
if (!$isPotentialContact) {
	$eventContactRel = 'fp_events_contacts';
}
else {
	$eventContactRel = 'fp_events';
}
$contact->load_relationship($eventContactRel);
$params = array(
		'where' => array(
				'lhs_field' => 'id',
				'operator' => '=',
				'rhs_value' => $event_id,
		),
);
// ...check and (if not already present) create the relation between Contacts and Events)
$contactAlreadyRegistered = false;
$cntRelatedEvent = $contact->$eventContactRel->getBeans($params);
if (empty($cntRelatedEvent)) {
	$contact->$eventContactRel->add($event_id); 
	if(!empty($GLOBALS['check_notify'])) {
		$contact->save($GLOBALS['check_notify']);
	}
	else {
		$contact->save(FALSE);
	}
}
else {
	$contactAlreadyRegistered = true;
}
// ...update relationship attributes (status=invited, registration=accepted)
$eventRegistrationAttrsUpdate = null;
if (!$isPotentialContact) {
	$eventRegistrationAttrsUpdate = "UPDATE fp_events_contacts_c SET invite_status='Invited', accept_status='Accepted' WHERE fp_events_contactsfp_events_ida='" . $event_id . "' AND fp_events_contactscontacts_idb='" . $contact->id . "'";
}
else {
	$eventRegistrationAttrsUpdate = "UPDATE fp_events_contactspotentialmember SET invite_status='Invited', accept_status='Accepted' WHERE fp_event_id='" . $event_id . "' AND osy_contactspotentialmember_id='" . $contact->id . "'";
}
$updAttrResult = $GLOBALS['db']->query($eventRegistrationAttrsUpdate);


// Perform redirect if specified
if(isset($_POST['redirect_url']) && !empty($_POST['redirect_url'])){
	$redirect_url = $_POST['redirect_url'];
	$query_string = '';
	$first_char = '&';
	if(strpos($redirect_url, '?') === FALSE){
		$first_char = '?';
	}
	$first_iteration = true;
	$get_and_post = array_merge($_GET, $_POST);
	foreach($get_and_post as $param => $value) {

		if($param == 'redirect_url' && $param == 'submit')
			continue;

			if($first_iteration){
				$first_iteration = false;
				$query_string .= $first_char;
			}
			else{
				$query_string .= "&";
			}
			$query_string .= "{$param}=".urlencode($value);
	}
	if(empty($contact)) {
		if($first_iteration){
			$query_string .= $first_char;
		}
		else{
			$query_string .= "&";
		}
		$query_string .= "error=1";
	}

	$redirect_url = $redirect_url.$query_string;


	// Check if the headers have been sent, or if the redirect url is greater than 2083 characters (IE max URL length)
	//   and use a javascript form submission if that is the case.
	if(headers_sent() || strlen($redirect_url) > 2083){
		echo '<html ' . get_language_header() . '><head><title>SugarCRM</title></head><body>';
		echo '<form name="redirect" action="' .$_POST['redirect_url']. '" method="GET">';

		foreach($_POST as $param => $value) {
			if($param != 'redirect_url' ||$param != 'submit') {
				echo '<input type="hidden" name="'.$param.'" value="'.$value.'">';
			}
		}
		if(empty($contact)) {
			echo '<input type="hidden" name="error" value="1">';
		}
		echo '</form><script language="javascript" type="text/javascript">document.redirect.submit();</script>';
		echo '</body></html>';
	}
	else{
		header("Location: {$redirect_url}");
		die();
	}
}
else{
	if (!$contactAlreadyRegistered) {
		echo $mod_strings['LBL_THANKS_FOR_SUBMITTING_CONTACT'];
	}
	else {
		echo $mod_strings['LBL_CONTACT_ALREADY_REGISTERED_TO_THE_EVENT'];
	}
	if (!$updAttrResult) {
		echo $mod_strings['LBL_CONTACT_EVENT_REGISTRATION_NOT_UPDATED'];
		return;
	}
}
sugar_cleanup();
// die to keep code from running into redirect case below
die();


// if (!empty($_POST['redirect'])) {
//     if(headers_sent()){
//     	echo '<html ' . get_language_header() . '><head><title>SugarCRM</title></head><body>';
//     	echo '<form name="redirect" action="' .$_POST['redirect']. '" method="GET">';
//     	echo '</form><script language="javascript" type="text/javascript">document.redirect.submit();</script>';
//     	echo '</body></html>';
//     }
//     else{
//     	header("Location: {$_POST['redirect']}");
//     	die();
//     }
// }
// echo $mod_strings['LBL_SERVER_IS_CURRENTLY_UNAVAILABLE'];

?>
